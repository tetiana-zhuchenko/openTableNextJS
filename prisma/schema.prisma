generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Booking {
  id                Int                @id @default(autoincrement())
  number_of_people  Int
  booking_time      DateTime
  booker_email      String
  booker_phone      String
  booker_first_name String
  booker_last_name  String
  booker_occasion   String?
  booker_request    String?
  restaurant_id     Int
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  Restaurant        Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  BookingsOnTables  BookingsOnTables[]
}

model BookingsOnTables {
  booking_id Int
  table_id   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Booking    Booking  @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Table      Table    @relation(fields: [table_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([booking_id, table_id])
}

model Cuisine {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Restaurant Restaurant[]
}

model Item {
  id            Int        @id @default(autoincrement())
  name          String
  price         String
  description   String
  restaurant_id Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  Restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Location {
  id         Int          @id @default(autoincrement())
  name       String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  Restaurant Restaurant[]
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  name        String
  main_image  String
  images      String[]
  description String
  open_time   String
  close_time  String
  slug        String    @unique
  price       PRICE
  location_id Int
  cuisine_id  Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  Booking     Booking[]
  Item        Item[]
  Cuisine     Cuisine   @relation(fields: [cuisine_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Location    Location  @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Review      Review[]
  Table       Table[]
}

model Review {
  id            Int        @id @default(autoincrement())
  first_name    String
  last_name     String
  text          String
  rating        Int
  restaurant_id Int
  user_id       Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  Restaurant    Restaurant @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User          User       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Table {
  id               Int                @id @default(autoincrement())
  seats            Int
  restaurant_id    Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @default(now())
  BookingsOnTables BookingsOnTables[]
  Restaurant       Restaurant         @relation(fields: [restaurant_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id         Int      @id @default(autoincrement())
  first_name String
  last_name  String
  email      String   @unique
  phone      String
  city       String
  password   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  Review     Review[]
}

enum PRICE {
  CHEAP
  REGULAR
  EXPENSIVE
}
